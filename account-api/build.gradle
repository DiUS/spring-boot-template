buildscript {
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.0.RELEASE")
        classpath "com.github.jengelman.gradle.plugins:shadow:1.2.3"
    }
}

plugins {
    id "au.com.dius.pact" version "3.3.7"
    id "com.wiredforcode.spawn" version "0.8.2"
}

apply plugin: 'spring-boot'
apply plugin: "com.wiredforcode.spawn"

jar {
    baseName = 'account-api'
    version =  "$version"
}

repositories {
    jcenter()
    mavenCentral()
    maven { url "http://repo.spring.io/libs-snapshot" }
}

dependencies {
    compile(
        "org.springframework.boot:spring-boot-starter-parent:$springbootVersion",
        "org.springframework.boot:spring-boot-starter-web:$springbootVersion",
        "org.springframework.boot:spring-boot-starter-jersey:$springbootVersion",
        "org.slf4j:slf4j-api:$slf4jVersion"
    )

    testCompile (
        "org.assertj:assertj-core:$assertjVersion",
        "org.springframework.boot:spring-boot-starter-test:$springbootVersion"
    )
}
import com.wiredforcode.gradle.spawn.*
task startProvider(type: SpawnProcessTask, dependsOn: 'assemble') {
    command "java " +
            "-Dspring.profiles.active=test -jar ${jar.archivePath}"
    ready 'Started @'
}

task stopProvider(type: KillProcessTask) { }

pact {
    serviceProviders {
        accountProvider {
            /*

            TODO: startProviderTask does not work
            port = 8080
            startProviderTask = startProvider
            terminateProviderTask = stopProvider
            stateChangeUrl = url('http://localhost:8080/pactStateChange')
            */

            hasPactsWith('Account_Consumer') {
                pactFileLocation = file("$projectDir/../pacts")
            }
        }
    }
}